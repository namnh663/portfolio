import React from 'react';
import './Topic.css';

const PerformanceTestingTypes = () => {
    return (
        <div className="topic-detail">
            <h2>Types of Performance Testing</h2>
            <p>
                Performance testing encompasses various types designed to evaluate the responsiveness and stability of a system or component under different conditions and loads. The choice of testing type depends on the specific objectives of the project.
            </p>
            <h3>Types of Performance Testing</h3>
            <ol>
                <li><strong>Performance Testing</strong>
                    <p>An umbrella term that includes all testing focused on system responsiveness under various load conditions.</p>
                </li>
                <li><strong>Load Testing</strong>
                    <p>Assesses the system's ability to handle increasing levels of realistic loads from transaction requests generated by controlled numbers of concurrent users or processes.</p>
                </li>
                <li><strong>Stress Testing</strong>
                    <p>Evaluates the system's ability to handle peak loads at or beyond its anticipated limits.</p>
                    <p>Also tests the system's performance under reduced resource availability (e.g., limited computing capacity, bandwidth, memory).</p>
                </li>
                <li><strong>Scalability Testing</strong>
                    <p>Tests the system's ability to meet future efficiency requirements that may exceed current demands.</p>
                    <p>Determines how well the system can grow (e.g., more users, larger data volumes) without failing or violating performance requirements.</p>
                    <p>Helps set threshold values and adjust the production environment appropriately.</p>
                </li>
                <li><strong>Spike Testing</strong>
                    <p>Assesses the system's response to sudden bursts of peak loads and its ability to return to a steady state afterward.</p>
                </li>
                <li><strong>Endurance Testing</strong>
                    <p>Evaluates the system's stability over a specific time frame, ensuring no resource capacity issues (e.g., memory leaks, database connections, thread pools) that could degrade performance or cause failures.</p>
                </li>
                <li><strong>Concurrency Testing</strong>
                    <p>Examines the impact of simultaneous actions, such as many users logging in at the same time.</p>
                    <p>Concurrency issues are often difficult to find and reproduce, especially in environments with little control, like production.</p>
                </li>
                <li><strong>Capacity Testing</strong>
                    <p>Determines the maximum number of users and/or transactions a system can support while meeting performance objectives.</p>
                    <p>Objectives may also include data volume considerations resulting from transactions.</p>
                </li>
            </ol>
            <p>
                Each type of performance testing targets specific aspects of system performance, helping identify potential issues and ensure the system can handle various load conditions and future demands.
            </p>

            <h2>Testing Types in Performance Testing</h2>
            <p>
                Performance testing involves two principal types: static testing and dynamic testing. Each type addresses different aspects of performance evaluation and plays a crucial role in identifying and mitigating performance issues.
            </p>
            <h3>Static Testing</h3>
            <p>
                Static testing is particularly important for performance testing due to the potential for critical performance defects introduced during the architecture and design phases. These defects often stem from misunderstandings or insufficient knowledge by designers and architects, as well as inadequate requirements that fail to capture performance targets and constraints.
            </p>
            <p>Key Activities in Static Testing:</p>
            <ul>
                <li><strong>Review of Requirements</strong>: Focus on performance aspects and risks.</li>
                <li><strong>Database Schema Reviews</strong>: Assess entity-relationship diagrams, metadata, stored procedures, and queries.</li>
                <li><strong>System and Network Architecture Reviews</strong>: Ensure robust design.</li>
                <li><strong>Code Reviews</strong>: Evaluate critical segments of the system code, such as complex algorithms.</li>
            </ul>
            <h3>Dynamic Testing</h3>
            <p>
                Dynamic performance testing begins as soon as the system starts being built and continues through various stages of development. It provides insights into how the system performs under different conditions and helps identify potential bottlenecks and resource utilization issues.
            </p>
            <p>Opportunities for Dynamic Testing:</p>
            <ul>
                <li><strong>Unit Testing</strong>: Use profiling information to identify potential bottlenecks and perform dynamic analysis of resource utilization.</li>
                <li><strong>Component Integration Testing</strong>: Test key use cases and workflows, especially when integrating different features or the backbone structure of a workflow.</li>
                <li><strong>System Testing</strong>: Evaluate overall end-to-end behaviors under various load conditions.</li>
                <li><strong>System Integration Testing</strong>: Focus on data flows and workflows across key inter-system interfaces, where the "user" may be another system or machine (e.g., sensor inputs).</li>
                <li><strong>Acceptance Testing</strong>: Build user, customer, and operator confidence in system performance under real-world conditions. This stage is more about fine-tuning than identifying performance defects.</li>
            </ul>
            <h3>Importance of Realistic Testing</h3>
            <p>
                In higher test levels such as system testing and system integration testing, using realistic environments, data, and loads is critical for obtaining accurate results.
            </p>
            <h3>Integration in Iterative-Incremental Lifecycles</h3>
            <p>
                In Agile and other iterative-incremental lifecycles, static and dynamic performance testing should be incorporated into early iterations. This proactive approach helps address performance risks early rather than deferring them to final iterations.
            </p>
            <h3>Testing on Actual Hardware</h3>
            <p>
                When custom or new hardware is part of the system, early dynamic performance tests may use simulators. However, it is advisable to start testing on the actual hardware as soon as possible, since simulators may not fully capture resource constraints and performance-related behaviors.
            </p>
            <p>
                In summary, both static and dynamic testing are essential for thorough performance testing, helping to ensure that performance-related defects are identified and addressed throughout the development lifecycle.
            </p>
        </div>
    );
};

export default PerformanceTestingTypes;
